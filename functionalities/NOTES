													NOTES


Background:

Lets first start with a little bit of background with why do we need gRPC and why it is better than other avaibale options.

What is an RPC?

An RPC (Remote Procedure Call) is a mechanism in which a system 'A' (client) runs a program (or a process) on another system 'B' (server) and receives the output of this process as a response. It works on a client-server model and uses TCP protocols and JSON/XML for data serialization to transmit request/response data.


What the problem with traditional RPC?

The problem starts with JSON/XML data formats. These text-based formats aren't the best when it comes to data compression. These formats transfer additional data (basically semantics) along with the actual data and this leads to a huge amount of data being transferred between client and server.

This problem is addressed in gRPC and this is why gRPC is preferred over RPC.

What is gRPC?

gRPC is an open source protocol lead by Google (and hence 'g' in 'gRPC') . Like traditional RPC, it also uses an RPC at the base but combines it with a 'Protocol Buffer'. A Protocol buffers can describe the structure of data and the code can be generated from that description for generating or parsing a stream of bytes that represents the structured data. The binary data format slashes the actual data to around 10x times.

Since we are discussing HTTP, you might be wondering why not REST instead of traditional RPC.

Answer is that even REST uses JSON data format and as discussed above, this text-based format doesn't compress well. Also, REST uses HTTP v1.1 which works on a request/response model where if a server receives requests from multiples clients simulatanneouly, each request is handled one at a time. Where as gRPC uses HTTP v2 that comes along with multiplexing capabilities along with reqest/response model and can handle multiple requests simultaneously.

So far we have read why is gRPC is the best option we have. But how do we make use of gRPC? One way is to create an RPC on our own and then convert it into corresponding binary data format and transfer it to the server. Does this method seems intersting?? because creating is an RPC is 'very easy'. Another method is to have an interface that manages creates RPCs for us and handle their conversion at the client as well as at server.

And that's when gNMI comes into the role.

'gNMI' or 'gRPC Nework Management Interface' is an interface that uses gRPC to communicate with devices and manages RPCs and data conversions that take place during the communicaition (JSON to binary and vice-versa). It provides us following 4 functions that use gRPC at their base:

1. Capabilities : To retreive all the YANG modules present on the device. We use these modules to use upcoming functions.

2. Get : To retrive a operational data corresponding to the YANG module.

3. Set : To make configurational changes on the device using YANG modules. You should know the data structure of this YANG module in order to use this functionality

4. Subscribe : To stream operational data corresponding to a particular YANG module at a given cadence. Ideally this cadence should not be less than 30 seconds. It might vary depending on the situation.

After reading the stuff above, you now have an overview of why gRPC has an edge over traditional RPC, why do we need gNMI and what are its functionalities. But as said, we learn more when we perform what we read. And now it's time to leverage what we have learned/read so far and get our hands dirty. 

We will use a python library called 'pygnmi' as one of the gNMI clients and as a server, we would have a router with Cisco IOS-XR version 7.4.2.

First,  we need to configure grpc server on the router.


























Protocol? It works on TCP protocols like SSH, HTTP, XRD etc.
Encoding? JSON/XML which leads to heavy data transfer
Downside?



